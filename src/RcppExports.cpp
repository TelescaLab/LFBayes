// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_marginal_func
arma::mat get_marginal_func(arma::mat& cov, int ns, int nt);
RcppExport SEXP _LFBayes_get_marginal_func(SEXP covSEXP, SEXP nsSEXP, SEXP ntSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type nt(ntSEXP);
    rcpp_result_gen = Rcpp::wrap(get_marginal_func(cov, ns, nt));
    return rcpp_result_gen;
END_RCPP
}
// get_marginal_long
arma::mat get_marginal_long(arma::mat cov, int ns, int nt);
RcppExport SEXP _LFBayes_get_marginal_long(SEXP covSEXP, SEXP nsSEXP, SEXP ntSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type nt(ntSEXP);
    rcpp_result_gen = Rcpp::wrap(get_marginal_long(cov, ns, nt));
    return rcpp_result_gen;
END_RCPP
}
// get_posterior_summaries
Rcpp::List get_posterior_summaries(arma::mat splineS, arma::mat splineT, Rcpp::List mod, arma::uword numeig, int iter, int burnin, int nchains, arma::vec s, arma::vec t, double alpha);
RcppExport SEXP _LFBayes_get_posterior_summaries(SEXP splineSSEXP, SEXP splineTSEXP, SEXP modSEXP, SEXP numeigSEXP, SEXP iterSEXP, SEXP burninSEXP, SEXP nchainsSEXP, SEXP sSEXP, SEXP tSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type splineS(splineSSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type splineT(splineTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type numeig(numeigSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type nchains(nchainsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_summaries(splineS, splineT, mod, numeig, iter, burnin, nchains, s, t, alpha));
    return rcpp_result_gen;
END_RCPP
}
// loglik
arma::mat loglik(arma::vec y, arma::mat X, arma::mat Bs, arma::mat Bt, arma::field<arma::vec> missing, arma::field<arma::cube> Theta, arma::field<arma::vec> Varphi, arma::uword iter, arma::uword burnin);
RcppExport SEXP _LFBayes_loglik(SEXP ySEXP, SEXP XSEXP, SEXP BsSEXP, SEXP BtSEXP, SEXP missingSEXP, SEXP ThetaSEXP, SEXP VarphiSEXP, SEXP iterSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bs(BsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bt(BtSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type missing(missingSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type Varphi(VarphiSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik(y, X, Bs, Bt, missing, Theta, Varphi, iter, burnin));
    return rcpp_result_gen;
END_RCPP
}
// run_mcmc
Rcpp::List run_mcmc(arma::field<arma::vec> y, arma::field<arma::vec> missing, arma::mat X, arma::mat splineS, arma::mat splineT, int q1, int q2, int iter, int thin, int burnin, int nchains);
RcppExport SEXP _LFBayes_run_mcmc(SEXP ySEXP, SEXP missingSEXP, SEXP XSEXP, SEXP splineSSEXP, SEXP splineTSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP iterSEXP, SEXP thinSEXP, SEXP burninSEXP, SEXP nchainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type missing(missingSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type splineS(splineSSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type splineT(splineTSEXP);
    Rcpp::traits::input_parameter< int >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< int >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type nchains(nchainsSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc(y, missing, X, splineS, splineT, q1, q2, iter, thin, burnin, nchains));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LFBayes_get_marginal_func", (DL_FUNC) &_LFBayes_get_marginal_func, 3},
    {"_LFBayes_get_marginal_long", (DL_FUNC) &_LFBayes_get_marginal_long, 3},
    {"_LFBayes_get_posterior_summaries", (DL_FUNC) &_LFBayes_get_posterior_summaries, 10},
    {"_LFBayes_loglik", (DL_FUNC) &_LFBayes_loglik, 9},
    {"_LFBayes_run_mcmc", (DL_FUNC) &_LFBayes_run_mcmc, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_LFBayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
