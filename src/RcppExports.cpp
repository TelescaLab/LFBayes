// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// eigenLF
Rcpp::List eigenLF(arma::mat splineS, arma::mat splineT, Rcpp::List mod, arma::uword numeig, int burnin);
RcppExport SEXP _LFBayes_eigenLF(SEXP splineSSEXP, SEXP splineTSEXP, SEXP modSEXP, SEXP numeigSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type splineS(splineSSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type splineT(splineTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type numeig(numeigSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenLF(splineS, splineT, mod, numeig, burnin));
    return rcpp_result_gen;
END_RCPP
}
// getMarginalFunc
arma::mat getMarginalFunc(arma::mat& cov, int ns, int nt);
RcppExport SEXP _LFBayes_getMarginalFunc(SEXP covSEXP, SEXP nsSEXP, SEXP ntSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type nt(ntSEXP);
    rcpp_result_gen = Rcpp::wrap(getMarginalFunc(cov, ns, nt));
    return rcpp_result_gen;
END_RCPP
}
// getMarginalLong
arma::mat getMarginalLong(arma::mat cov, int ns, int nt);
RcppExport SEXP _LFBayes_getMarginalLong(SEXP covSEXP, SEXP nsSEXP, SEXP ntSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type nt(ntSEXP);
    rcpp_result_gen = Rcpp::wrap(getMarginalLong(cov, ns, nt));
    return rcpp_result_gen;
END_RCPP
}
// mcmcWeak
Rcpp::List mcmcWeak(arma::field<arma::vec> y, arma::field<arma::vec> missing, arma::mat X, arma::mat splineS, arma::mat splineT, int q1, int q2, int iter, int thin, int burnin);
RcppExport SEXP _LFBayes_mcmcWeak(SEXP ySEXP, SEXP missingSEXP, SEXP XSEXP, SEXP splineSSEXP, SEXP splineTSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP iterSEXP, SEXP thinSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type missing(missingSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type splineS(splineSSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type splineT(splineTSEXP);
    Rcpp::traits::input_parameter< int >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< int >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmcWeak(y, missing, X, splineS, splineT, q1, q2, iter, thin, burnin));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _LFBayes_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _LFBayes_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _LFBayes_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _LFBayes_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// convertToPrecision
arma::mat convertToPrecision(arma::vec Delta, arma::uword q1, arma::uword q2);
RcppExport SEXP _LFBayes_convertToPrecision(SEXP DeltaSEXP, SEXP q1SEXP, SEXP q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type q2(q2SEXP);
    rcpp_result_gen = Rcpp::wrap(convertToPrecision(Delta, q1, q2));
    return rcpp_result_gen;
END_RCPP
}
// updateBeta2
arma::mat updateBeta2(arma::mat E, arma::mat Eta, arma::mat X);
RcppExport SEXP _LFBayes_updateBeta2(SEXP ESEXP, SEXP EtaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(updateBeta2(E, Eta, X));
    return rcpp_result_gen;
END_RCPP
}
// updateBetaProd
void updateBetaProd(arma::cube& eta, arma::vec Delta, arma::mat& E, arma::mat& X, arma::mat& beta);
RcppExport SEXP _LFBayes_updateBetaProd(SEXP etaSEXP, SEXP DeltaSEXP, SEXP ESEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    updateBetaProd(eta, Delta, E, X, beta);
    return R_NilValue;
END_RCPP
}
// updateDelta3
arma::vec updateDelta3(arma::mat& Lambda, arma::mat& Phi, arma::vec Delta, double a1, double a2);
RcppExport SEXP _LFBayes_updateDelta3(SEXP LambdaSEXP, SEXP PhiSEXP, SEXP DeltaSEXP, SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(updateDelta3(Lambda, Phi, Delta, a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// updateDeltaProdTemp
arma::vec updateDeltaProdTemp(arma::mat Lambda, arma::vec Delta, double a1, double a2);
RcppExport SEXP _LFBayes_updateDeltaProdTemp(SEXP LambdaSEXP, SEXP DeltaSEXP, SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(updateDeltaProdTemp(Lambda, Delta, a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// updateE
arma::mat updateE(arma::mat beta);
RcppExport SEXP _LFBayes_updateE(SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateE(beta));
    return rcpp_result_gen;
END_RCPP
}
// updateEta
void updateEta(arma::mat& Lambda, arma::mat& Gamma, arma::vec sigma1, arma::vec sigma2, arma::mat H, arma::mat& splineS, arma::mat& splineT, arma::mat& y, double varphi, arma::mat& beta, arma::mat& X, arma::cube& eta);
RcppExport SEXP _LFBayes_updateEta(SEXP LambdaSEXP, SEXP GammaSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP HSEXP, SEXP splineSSEXP, SEXP splineTSEXP, SEXP ySEXP, SEXP varphiSEXP, SEXP betaSEXP, SEXP XSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type splineS(splineSSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type splineT(splineTSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type varphi(varphiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta(etaSEXP);
    updateEta(Lambda, Gamma, sigma1, sigma2, H, splineS, splineT, y, varphi, beta, X, eta);
    return R_NilValue;
END_RCPP
}
// updateEta2
arma::mat updateEta2(arma::mat Lambda, arma::mat Basis, arma::vec Sigma, arma::mat Data, arma::mat Beta, arma::mat X, double Varphi);
RcppExport SEXP _LFBayes_updateEta2(SEXP LambdaSEXP, SEXP BasisSEXP, SEXP SigmaSEXP, SEXP DataSEXP, SEXP BetaSEXP, SEXP XSEXP, SEXP VarphiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Basis(BasisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type Varphi(VarphiSEXP);
    rcpp_result_gen = Rcpp::wrap(updateEta2(Lambda, Basis, Sigma, Data, Beta, X, Varphi));
    return rcpp_result_gen;
END_RCPP
}
// updateEta3
void updateEta3(arma::mat Gamma, arma::mat Lambda, arma::vec sigma2, arma::vec sigma1, arma::cube Theta, arma::mat H, arma::mat X, arma::mat Beta, arma::cube& eta);
RcppExport SEXP _LFBayes_updateEta3(SEXP GammaSEXP, SEXP LambdaSEXP, SEXP sigma2SEXP, SEXP sigma1SEXP, SEXP ThetaSEXP, SEXP HSEXP, SEXP XSEXP, SEXP BetaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta(etaSEXP);
    updateEta3(Gamma, Lambda, sigma2, sigma1, Theta, H, X, Beta, eta);
    return R_NilValue;
END_RCPP
}
// updateEtaProd
void updateEtaProd(arma::mat& Lambda, arma::mat& Gamma, arma::vec sigma1, arma::vec sigma2, arma::vec Delta, arma::mat& splineS, arma::mat& splineT, arma::mat& y, double varphi, arma::mat& beta, arma::mat& X, arma::cube& eta);
RcppExport SEXP _LFBayes_updateEtaProd(SEXP LambdaSEXP, SEXP GammaSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP DeltaSEXP, SEXP splineSSEXP, SEXP splineTSEXP, SEXP ySEXP, SEXP varphiSEXP, SEXP betaSEXP, SEXP XSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type splineS(splineSSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type splineT(splineTSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type varphi(varphiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta(etaSEXP);
    updateEtaProd(Lambda, Gamma, sigma1, sigma2, Delta, splineS, splineT, y, varphi, beta, X, eta);
    return R_NilValue;
END_RCPP
}
// updateGamma
void updateGamma(arma::cube& eta, arma::mat& Lambda, arma::vec Deltastar, arma::mat& Phistar, arma::vec sigma1, arma::vec sigma2, arma::cube& theta, arma::mat& Gamma);
RcppExport SEXP _LFBayes_updateGamma(SEXP etaSEXP, SEXP LambdaSEXP, SEXP DeltastarSEXP, SEXP PhistarSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP thetaSEXP, SEXP GammaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Deltastar(DeltastarSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Phistar(PhistarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    updateGamma(eta, Lambda, Deltastar, Phistar, sigma1, sigma2, theta, Gamma);
    return R_NilValue;
END_RCPP
}
// updateH
arma::mat updateH(arma::cube& eta, arma::mat& beta, arma::mat& X);
RcppExport SEXP _LFBayes_updateH(SEXP etaSEXP, SEXP betaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(updateH(eta, beta, X));
    return rcpp_result_gen;
END_RCPP
}
// updateHb
double updateHb(arma::mat H);
RcppExport SEXP _LFBayes_updateHb(SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(updateHb(H));
    return rcpp_result_gen;
END_RCPP
}
// updateHProd
arma::vec updateHProd(arma::cube Eta, arma::mat beta, arma::mat X, arma::vec Delta);
RcppExport SEXP _LFBayes_updateHProd(SEXP EtaSEXP, SEXP betaSEXP, SEXP XSEXP, SEXP DeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateHProd(Eta, beta, X, Delta));
    return rcpp_result_gen;
END_RCPP
}
// updateLambda
void updateLambda(arma::cube& eta, arma::mat& Gamma, arma::vec Delta, arma::mat& Phi, arma::vec sigma1, arma::vec sigma2, arma::cube& theta, arma::mat& Lambda);
RcppExport SEXP _LFBayes_updateLambda(SEXP etaSEXP, SEXP GammaSEXP, SEXP DeltaSEXP, SEXP PhiSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP thetaSEXP, SEXP LambdaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    updateLambda(eta, Gamma, Delta, Phi, sigma1, sigma2, theta, Lambda);
    return R_NilValue;
END_RCPP
}
// updateLambda2
arma::mat updateLambda2(arma::mat Theta, arma::mat eta, arma::vec Sigma, arma::vec Tau);
RcppExport SEXP _LFBayes_updateLambda2(SEXP ThetaSEXP, SEXP etaSEXP, SEXP SigmaSEXP, SEXP TauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Tau(TauSEXP);
    rcpp_result_gen = Rcpp::wrap(updateLambda2(Theta, eta, Sigma, Tau));
    return rcpp_result_gen;
END_RCPP
}
// updateLambda3
arma::mat updateLambda3(arma::mat Theta, arma::mat eta, arma::vec Sigma, arma::mat Phi, arma::vec Delta);
RcppExport SEXP _LFBayes_updateLambda3(SEXP ThetaSEXP, SEXP etaSEXP, SEXP SigmaSEXP, SEXP PhiSEXP, SEXP DeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateLambda3(Theta, eta, Sigma, Phi, Delta));
    return rcpp_result_gen;
END_RCPP
}
// updatePhi
arma::mat updatePhi(arma::mat& Lambda, arma::vec delta);
RcppExport SEXP _LFBayes_updatePhi(SEXP LambdaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePhi(Lambda, delta));
    return rcpp_result_gen;
END_RCPP
}
// updateSigma1
arma::vec updateSigma1(arma::cube& eta, arma::cube& theta, arma::mat& Lambda, arma::mat& Gamma, arma::vec sigma2);
RcppExport SEXP _LFBayes_updateSigma1(SEXP etaSEXP, SEXP thetaSEXP, SEXP LambdaSEXP, SEXP GammaSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(updateSigma1(eta, theta, Lambda, Gamma, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// updateSigma2
arma::vec updateSigma2(arma::mat Theta, arma::mat Lambda, arma::mat Eta);
RcppExport SEXP _LFBayes_updateSigma2(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP EtaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Eta(EtaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateSigma2(Theta, Lambda, Eta));
    return rcpp_result_gen;
END_RCPP
}
// updateTheta
arma::cube updateTheta(arma::mat& Lambda, arma::mat& Gamma, arma::vec sigma1, arma::vec sigma2, arma::cube& eta, arma::mat& splineS, arma::mat& splineT, arma::mat& y, double varphi);
RcppExport SEXP _LFBayes_updateTheta(SEXP LambdaSEXP, SEXP GammaSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP etaSEXP, SEXP splineSSEXP, SEXP splineTSEXP, SEXP ySEXP, SEXP varphiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type splineS(splineSSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type splineT(splineTSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type varphi(varphiSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTheta(Lambda, Gamma, sigma1, sigma2, eta, splineS, splineT, y, varphi));
    return rcpp_result_gen;
END_RCPP
}
// updateTheta2
arma::mat updateTheta2(arma::mat Lambda, arma::vec Sigma, arma::mat eta, arma::mat Data, double Varphi, arma::mat Basis);
RcppExport SEXP _LFBayes_updateTheta2(SEXP LambdaSEXP, SEXP SigmaSEXP, SEXP etaSEXP, SEXP DataSEXP, SEXP VarphiSEXP, SEXP BasisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< double >::type Varphi(VarphiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Basis(BasisSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTheta2(Lambda, Sigma, eta, Data, Varphi, Basis));
    return rcpp_result_gen;
END_RCPP
}
// updateVarphi
double updateVarphi(arma::cube& theta, arma::mat& splineS, arma::mat& splineT, arma::mat& y);
RcppExport SEXP _LFBayes_updateVarphi(SEXP thetaSEXP, SEXP splineSSEXP, SEXP splineTSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type splineS(splineSSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type splineT(splineTSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(updateVarphi(theta, splineS, splineT, y));
    return rcpp_result_gen;
END_RCPP
}
// updateVarphi2
double updateVarphi2(arma::mat Data, arma::mat Theta, arma::mat Basis);
RcppExport SEXP _LFBayes_updateVarphi2(SEXP DataSEXP, SEXP ThetaSEXP, SEXP BasisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Basis(BasisSEXP);
    rcpp_result_gen = Rcpp::wrap(updateVarphi2(Data, Theta, Basis));
    return rcpp_result_gen;
END_RCPP
}
// updatea1
double updatea1(arma::vec Delta, double a1);
RcppExport SEXP _LFBayes_updatea1(SEXP DeltaSEXP, SEXP a1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    rcpp_result_gen = Rcpp::wrap(updatea1(Delta, a1));
    return rcpp_result_gen;
END_RCPP
}
// updatea2
double updatea2(arma::vec Delta, double a2);
RcppExport SEXP _LFBayes_updatea2(SEXP DeltaSEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(updatea2(Delta, a2));
    return rcpp_result_gen;
END_RCPP
}
// updateLambdaSmooth
arma::mat updateLambdaSmooth(arma::cube Eta, arma::mat Gamma, arma::vec Sigma1, arma::vec Sigma2, arma::vec Tau, arma::cube Theta);
RcppExport SEXP _LFBayes_updateLambdaSmooth(SEXP EtaSEXP, SEXP GammaSEXP, SEXP Sigma1SEXP, SEXP Sigma2SEXP, SEXP TauSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma1(Sigma1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma2(Sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Theta(ThetaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateLambdaSmooth(Eta, Gamma, Sigma1, Sigma2, Tau, Theta));
    return rcpp_result_gen;
END_RCPP
}
// updateLambda4
arma::mat updateLambda4(arma::mat Theta, arma::mat eta, arma::vec Sigma, arma::vec Delta);
RcppExport SEXP _LFBayes_updateLambda4(SEXP ThetaSEXP, SEXP etaSEXP, SEXP SigmaSEXP, SEXP DeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateLambda4(Theta, eta, Sigma, Delta));
    return rcpp_result_gen;
END_RCPP
}
// updateLambdaSmoothD
arma::mat updateLambdaSmoothD(arma::cube Eta, arma::mat Gamma, arma::vec Sigma1, arma::vec Sigma2, arma::vec Delta, arma::cube Theta);
RcppExport SEXP _LFBayes_updateLambdaSmoothD(SEXP EtaSEXP, SEXP GammaSEXP, SEXP Sigma1SEXP, SEXP Sigma2SEXP, SEXP DeltaSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma1(Sigma1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma2(Sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Theta(ThetaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateLambdaSmoothD(Eta, Gamma, Sigma1, Sigma2, Delta, Theta));
    return rcpp_result_gen;
END_RCPP
}
// updateGammaSmooth
arma::mat updateGammaSmooth(arma::cube Eta, arma::mat Lambda, arma::vec Sigma1, arma::vec Sigma2, arma::vec Tau, arma::cube Theta);
RcppExport SEXP _LFBayes_updateGammaSmooth(SEXP EtaSEXP, SEXP LambdaSEXP, SEXP Sigma1SEXP, SEXP Sigma2SEXP, SEXP TauSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma1(Sigma1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma2(Sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Theta(ThetaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateGammaSmooth(Eta, Lambda, Sigma1, Sigma2, Tau, Theta));
    return rcpp_result_gen;
END_RCPP
}
// updateGammaSmoothD
arma::mat updateGammaSmoothD(arma::cube Eta, arma::mat Lambda, arma::vec Sigma1, arma::vec Sigma2, arma::vec Delta, arma::cube Theta);
RcppExport SEXP _LFBayes_updateGammaSmoothD(SEXP EtaSEXP, SEXP LambdaSEXP, SEXP Sigma1SEXP, SEXP Sigma2SEXP, SEXP DeltaSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma1(Sigma1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma2(Sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Theta(ThetaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateGammaSmoothD(Eta, Lambda, Sigma1, Sigma2, Delta, Theta));
    return rcpp_result_gen;
END_RCPP
}
// updateTau
arma::vec updateTau(arma::mat Lambda);
RcppExport SEXP _LFBayes_updateTau(SEXP LambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTau(Lambda));
    return rcpp_result_gen;
END_RCPP
}
// updateDeltaProd
arma::vec updateDeltaProd(arma::mat Lambda, arma::vec Delta);
RcppExport SEXP _LFBayes_updateDeltaProd(SEXP LambdaSEXP, SEXP DeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta(DeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateDeltaProd(Lambda, Delta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LFBayes_eigenLF", (DL_FUNC) &_LFBayes_eigenLF, 5},
    {"_LFBayes_getMarginalFunc", (DL_FUNC) &_LFBayes_getMarginalFunc, 3},
    {"_LFBayes_getMarginalLong", (DL_FUNC) &_LFBayes_getMarginalLong, 3},
    {"_LFBayes_mcmcWeak", (DL_FUNC) &_LFBayes_mcmcWeak, 10},
    {"_LFBayes_rcpparma_hello_world", (DL_FUNC) &_LFBayes_rcpparma_hello_world, 0},
    {"_LFBayes_rcpparma_outerproduct", (DL_FUNC) &_LFBayes_rcpparma_outerproduct, 1},
    {"_LFBayes_rcpparma_innerproduct", (DL_FUNC) &_LFBayes_rcpparma_innerproduct, 1},
    {"_LFBayes_rcpparma_bothproducts", (DL_FUNC) &_LFBayes_rcpparma_bothproducts, 1},
    {"_LFBayes_convertToPrecision", (DL_FUNC) &_LFBayes_convertToPrecision, 3},
    {"_LFBayes_updateBeta2", (DL_FUNC) &_LFBayes_updateBeta2, 3},
    {"_LFBayes_updateBetaProd", (DL_FUNC) &_LFBayes_updateBetaProd, 5},
    {"_LFBayes_updateDelta3", (DL_FUNC) &_LFBayes_updateDelta3, 5},
    {"_LFBayes_updateDeltaProdTemp", (DL_FUNC) &_LFBayes_updateDeltaProdTemp, 4},
    {"_LFBayes_updateE", (DL_FUNC) &_LFBayes_updateE, 1},
    {"_LFBayes_updateEta", (DL_FUNC) &_LFBayes_updateEta, 12},
    {"_LFBayes_updateEta2", (DL_FUNC) &_LFBayes_updateEta2, 7},
    {"_LFBayes_updateEta3", (DL_FUNC) &_LFBayes_updateEta3, 9},
    {"_LFBayes_updateEtaProd", (DL_FUNC) &_LFBayes_updateEtaProd, 12},
    {"_LFBayes_updateGamma", (DL_FUNC) &_LFBayes_updateGamma, 8},
    {"_LFBayes_updateH", (DL_FUNC) &_LFBayes_updateH, 3},
    {"_LFBayes_updateHb", (DL_FUNC) &_LFBayes_updateHb, 1},
    {"_LFBayes_updateHProd", (DL_FUNC) &_LFBayes_updateHProd, 4},
    {"_LFBayes_updateLambda", (DL_FUNC) &_LFBayes_updateLambda, 8},
    {"_LFBayes_updateLambda2", (DL_FUNC) &_LFBayes_updateLambda2, 4},
    {"_LFBayes_updateLambda3", (DL_FUNC) &_LFBayes_updateLambda3, 5},
    {"_LFBayes_updatePhi", (DL_FUNC) &_LFBayes_updatePhi, 2},
    {"_LFBayes_updateSigma1", (DL_FUNC) &_LFBayes_updateSigma1, 5},
    {"_LFBayes_updateSigma2", (DL_FUNC) &_LFBayes_updateSigma2, 3},
    {"_LFBayes_updateTheta", (DL_FUNC) &_LFBayes_updateTheta, 9},
    {"_LFBayes_updateTheta2", (DL_FUNC) &_LFBayes_updateTheta2, 6},
    {"_LFBayes_updateVarphi", (DL_FUNC) &_LFBayes_updateVarphi, 4},
    {"_LFBayes_updateVarphi2", (DL_FUNC) &_LFBayes_updateVarphi2, 3},
    {"_LFBayes_updatea1", (DL_FUNC) &_LFBayes_updatea1, 2},
    {"_LFBayes_updatea2", (DL_FUNC) &_LFBayes_updatea2, 2},
    {"_LFBayes_updateLambdaSmooth", (DL_FUNC) &_LFBayes_updateLambdaSmooth, 6},
    {"_LFBayes_updateLambda4", (DL_FUNC) &_LFBayes_updateLambda4, 4},
    {"_LFBayes_updateLambdaSmoothD", (DL_FUNC) &_LFBayes_updateLambdaSmoothD, 6},
    {"_LFBayes_updateGammaSmooth", (DL_FUNC) &_LFBayes_updateGammaSmooth, 6},
    {"_LFBayes_updateGammaSmoothD", (DL_FUNC) &_LFBayes_updateGammaSmoothD, 6},
    {"_LFBayes_updateTau", (DL_FUNC) &_LFBayes_updateTau, 1},
    {"_LFBayes_updateDeltaProd", (DL_FUNC) &_LFBayes_updateDeltaProd, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_LFBayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
